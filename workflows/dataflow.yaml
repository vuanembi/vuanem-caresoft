main:
  params: [args]
  steps:
    - init:
        assign:
          - jobs: ${json.decode(args.jobs).jobs}
          - jobResults: []

    - runJobs:
        for:
          value: job
          index: i
          in: ${jobs}
          steps:
            - initResult:
                assign:
                  - jobResult:

            - runJob:
                call: dataflow
                args:
                  jobName: ${job.table + string(sys.now)}
                  input: ${json.encode(job)}
                result: jobResult

            - saveResult:
                assign:
                  - jobResults: ${list.concat(jobResults, jobResult)}
                  
    - returnResults:
        return: ${jobResults}

dataflow:
  params:
    - jobName
    - input
  steps:
    - init:
        assign:
          - projectId: ${sys.get_env("GOOGLE_CLOUD_PROJECT_ID")}
          - location: us-central1
          - launchResult:

    - createJob:
        call: googleapis.dataflow.v1b3.projects.locations.flexTemplates.launch
        args:
          projectId: ${projectId}
          location: ${location}
          body:
            launchParameters:
              jobName: ${jobName}
              parameters:
                input: ${input}
        result: launchResult

    - pollJob:
        steps:
          - getJobId:
              assign:
                - job:

          - checkJob:
              call: googleapis.dataflow.v1b3.projects.locations.jobs.get
              args:
                projectId: ${projectId}
                location: ${location}
                jobId: ${launchResult.clientRequestId}
              result: job

          - checkIfDone:
              switch:
                - condition: ${job.currentState in(["JOB_STATE_DONE", "JOB_STATE_FAILED", "JOB_STATE_CANCELLED"])}
                  return: job

          - wait:
              call: sys.sleep
              args:
                seconds: 120
              next: checkJob
